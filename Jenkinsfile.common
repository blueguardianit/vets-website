
VETSGOV_BUILDTYPES = [
  'development',
  'staging',
  'production'
]

VAGOV_BUILDTYPES = [
  'vagovdev',
  'vagovstaging',
  'vagovprod'
]

DRUPAL_MAPPING = [
  'dev': 'vagovdev',
  'staging': 'vagovstaging',
  'live': 'vagovprod',
]

DEV_BRANCH = 'master'
STAGING_BRANCH = 'master'
PROD_BRANCH = 'master'

IS_DEV_BRANCH = env.BRANCH_NAME == DEV_BRANCH
IS_STAGING_BRANCH = env.BRANCH_NAME == STAGING_BRANCH
IS_PROD_BRANCH = env.BRANCH_NAME == PROD_BRANCH

def isReviewable() {
  return !IS_DEV_BRANCH && !IS_STAGING_BRANCH && !IS_PROD_BRANCH
}

def isDeployable() {
  return (IS_DEV_BRANCH ||
   IS_STAGING_BRANCH) &&
    !env.CHANGE_TARGET &&
    !currentBuild.nextBuild // if there's a later build on this job (branch), don't deploy
}

def shouldBail() {
  // abort the job if we're not on deployable branch (usually master) and there's a newer build going now
  return !IS_DEV_BRANCH &&
    !IS_STAGING_BRANCH &&
    !IS_PROD_BRANCH &&
    !env.CHANGE_TARGET &&
    currentBuild.nextBuild
}

def runDeploy(jobName, ref) {
  build job: jobName, parameters: [
    booleanParam(name: 'notify_slack', value: true),
    stringParam(name: 'ref', value: ref),
  ], wait: false
}

def buildDetails(String buildtype, String ref) {
  return """\
BUILDTYPE=${buildtype}
NODE_ENV=production
BRANCH_NAME=${env.BRANCH_NAME}
CHANGE_TARGET=${env.CHANGE_TARGET}
BUILD_ID=${env.BUILD_ID}
BUILD_NUMBER=${env.BUILD_NUMBER}
REF=${ref}
"""
}

def slackNotify() {
  if (IS_DEV_BRANCH || IS_STAGING_BRANCH || IS_PROD_BRANCH) {
    message = "vets-website ${env.BRANCH_NAME} branch CI failed. |${env.RUN_DISPLAY_URL}".stripMargin()
    slackSend message: message,
      color: 'danger',
      failOnError: true
  }
}

def setup(String dockerTag, String dockerArgs) {
  stage("Setup") {

		buildTypeOverride = DRUPAL_MAPPING.get(params.get('cmsEnv', 'none'), null)
    if(buildTypeOverride) {
      VAGOV_BUILDTYPES = [buildTypeOverride]
    }

    dir("vagov-content") {
      checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', noTags: true, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'va-bot', url: 'git@github.com:department-of-veterans-affairs/vagov-content.git']]]
    }
    
    dir("vets-website") {
			sh "mkdir -p build"
			sh "mkdir -p logs/selenium"
			sh "mkdir -p coverage"
			sh "mkdir -p temp"

      dockerImage = docker.build(dockerTag)
      retry(5) {
        dockerImage.inside(dockerArgs) {
          sh "cd /application && yarn install --production=false"
        }
      }
			return dockerImage
    }
  }
}

def build(String ref, dockerImage, String dockerArgs, Boolean cmsEnv) {
  stage("Build") {
		if (shouldBail()) { return }

    try {
      def builds = [:]
      def assetSource = cmsEnv ? ref : 'local'

      for (int i=0; i<VAGOV_BUILDTYPES.size(); i++) {
        def envName = VAGOV_BUILDTYPES.get(i)
        def buildDetails = buildDetails(envName, ref)
        builds[envName] = {
          dockerImage.inside(dockerArgs) {
            sh "cd /application && npm --no-color run build -- --buildtype=${envName} --asset-source=${assetSource}"
            sh "cd /application && echo \"${buildDetails}\" > build/${envName}/BUILD.txt"
          }
        }
      }

      parallel builds
    } catch (error) {
      slackNotify()
      throw error
    }
  }
}

def prearchive(dockerImage, String dockerArgs) {
  stage("Prearchive Optimizations") {
    if (shouldBail()) { return }

    try {
      def builds = [:]

      for (int i=0; i<VAGOV_BUILDTYPES.size(); i++) {
        def envName = VAGOV_BUILDTYPES.get(i)

        builds[envName] = {
          dockerImage.inside(dockerArgs) {
            sh "cd /application && node script/prearchive.js --buildtype=${envName}"
          }
        }
      }

      parallel builds
    } catch (error) {
      slackNotify()
      throw error
    }
  }
}

def archive(dockerImage, String dockerArgs, String ref) {
  stage("Archive") {
    if (shouldBail()) { return }

    def envNames = VAGOV_BUILDTYPES
    try {
      dockerImage.inside(dockerArgs) {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'vetsgov-website-builds-s3-upload',
                         usernameVariable: 'AWS_ACCESS_KEY', passwordVariable: 'AWS_SECRET_KEY']]) {
          for (int i=0; i<envNames.size(); i++) {
            sh "tar -C /application/build/${envNames.get(i)} -cf /application/build/${envNames.get(i)}.tar.bz2 ."
            sh "s3-cli put --acl-public --region us-gov-west-1 /application/build/${envNames.get(i)}.tar.bz2 s3://vetsgov-website-builds-s3-upload/${ref}/${envNames.get(i)}.tar.bz2"
          }
        }
      }
    } catch (error) {
      slackNotify()
      throw error
    }
  }
}

return this;
